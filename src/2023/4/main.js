const aoc = require("../../aoc");

(async function main() {
  const lines = await aoc.processFile();

  function nextCardIds(currentId, next) {
    const nextIds = [];
    for (let i = 1; i <= next; i++) {
      nextIds.push(currentId + i);
    }
    return nextIds;
  }

  const gameCards = [];

  const points = [];
  const memo = {}; // cardId: numMatches
  const multiplier = {}; // cardId: copies
  const parentsOfCard = {}; // cardId: Set[parentIds]
  let idx = 1;
  let totalCards = 0;
  for (line of lines) {
    console.log(line);
    const [card, others] = line.split(":");
    const cardId = card.split("Card")[1]?.trim();
    // console.log(">", line, cardId);
    const [cardNumbers, game] = others.split("|");
    const numbers = cardNumbers.split(" ").filter(c => c).map(c => +c);
    const gameNumbers = game.split(" ").filter(c => c).map(c => +c);
    // console.log(cardId, numbers, gameNumbers);

    // console.log(multiplier[cardId]);
    totalCards += (1 * (multiplier[cardId] ?? 0) + 1);
    // console.log("subtotal", totalCards);
    
    const gameNumbersSet = new Set(gameNumbers);
    let numMatches = 0;
    numbers.forEach(n => {
      if (gameNumbersSet.has(n)) {
        numMatches += 1;
      }
    });
    console.log(numMatches);
    if (numMatches > 0) {
      points.push(+numMatches);
      memo[cardId] = numMatches;
      const proceedingIds = nextCardIds(idx, numMatches);
      proceedingIds.forEach(id => {
        parentsOfCard[id] ??= new Set();
        parentsOfCard[id].add(cardId);
        // console.log(parentsOfCard, "cardId", cardId);
        multiplier[id] ??= 0;
        multiplier[id] += 1;
      });
      // console.log("> ", proceedingIds)
      // console.table(multiplier);
    } else {
      memo[cardId] = 0;
    }

    gameCards.push({
      cardId,
      numbers,
      gameNumbers,
      numMatches,
      proceedingIds: nextCardIds(idx, numMatches)
    });
    idx++;
  }

  // console.log(gameCards);

  // this will work but too slow
  // const deck = structuredClone(gameCards);
  // const playedCards = [];
  // while (deck.length > 0) {
  //   const card = deck.shift();
  //   playedCards.push(card.cardId);
  //   if (card.numMatches > 0) {
  //     deck.push(...card.proceedingIds.map(id => gameCards[id - 1]));
  //   }
  //   console.log(deck.length);
  // }
  // // console.log(playedCards);
  // console.log(playedCards.length);
  console.log(parentsOfCard)
  // return;

  function getParents(cardId) {
    const p = parentsOfCard[cardId] ?? new Set();
    return [...p].filter(f => f);
  }

  const cache = {}; // cardId: count
  function countInstances(card) {
    const currentCardId = card.cardId;
    // console.log("IN", currentCardId);
    if (cache?.[currentCardId]) {
      return cache[currentCardId];
    }

    // original + number of copies of ME that were generated by prior cards
    const parentCardIds = getParents(currentCardId);
    if (!parentCardIds || parentCardIds?.length === 0) {
      cache[currentCardId] = 1;
      // console.log("OUT", currentCardId, 1);
      return 1;
    }

    // console.log(currentCardId, "parents:", parentCardIds);
    const totals = parentCardIds.map(pCardId => {
      const parentCard = gameCards[pCardId - 1];
      const parentCardId = parentCard.cardId;
      // console.log("> ", pCardId, parentCardId, parentCard);
      const numCopiesFromParents = countInstances(parentCard);
      // console.log("<", numCopiesFromParents);
      return +numCopiesFromParents;
    });
    const total = totals.reduce((a, b) => a + b, 0);

    cache[currentCardId] = 1 + total;
    // console.log("OUT", currentCardId, 1 + total);
    return cache[currentCardId];
  }

  const countsPerCard = gameCards.map(countInstances);
  console.log(countsPerCard.reduce((a, b) => a + b, 0));
})();

// 243672 too low... misparsed the input "Card   1" became '' instead of '1' as there input was padded by spaces
// 23806951 correct. 
